version: '3.8'

services:
  db:
    image: postgres:16
    restart: always
    environment:
      POSTGRES_USER: aifinance
      POSTGRES_PASSWORD: devpass
      POSTGRES_DB: aifinance
    ports:
      - "5433:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - monitoring

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
  # Single API service with dynamic environment
  app:
    depends_on:
      - db
      - redis
    build:
      context: .
      args:
        APP_ENV: ${APP_ENV:-development}
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    env_file:
      - .env.${APP_ENV:-development}
    environment:
      - APP_ENV=${APP_ENV:-development}
      # Pass sensitive variables at runtime
#      - LLM_API_KEY=${LLM_API_KEY} //if uncommented will overwrite .env.development etc files
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-supersecretkeythatshouldbechangedforproduction}
      # Override database URL for Docker (use service name instead of localhost)
      - POSTGRES_URL=postgresql://aifinance:devpass@db:5432/aifinance
      # Ensure CORS is configured for frontend
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3001,http://localhost:8000,http://localhost:8080
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: on-failure
    networks:
      - monitoring


  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.48.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - monitoring
    restart: always
    depends_on:
      - app

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=
      - REDIS_EXPORTER_CHECK_KEYS=*
      - REDIS_EXPORTER_CHECK_KEY_GROUPS=llm_responses:*,conversations:*,embeddings:*
      - REDIS_EXPORTER_INCL_SYSTEM_METRICS=true
    networks:
      - monitoring
    restart: always
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Exporter for database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.15.0
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://aifinance:devpass@db:5432/aifinance?sslmode=disable
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres_exporter/queries.yml
      - PG_EXPORTER_DISABLE_DEFAULT_METRICS=false
      - PG_EXPORTER_DISABLE_SETTINGS_METRICS=false
    volumes:
      - ./monitoring/exporters/postgres_queries.yml:/etc/postgres_exporter/queries.yml:ro
    networks:
      - monitoring
    restart: always
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:v1.7.0
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    restart: always

  # AlertManager for handling alerts (optional but recommended)
  alertmanager:
    image: prom/alertmanager:v0.26.0
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring
    restart: always

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      - GF_PROVISIONING_PATH=/etc/grafana/provisioning
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/overview.json
    networks:
      - monitoring
    restart: always
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    restart: always


networks:
  monitoring:
    driver: bridge

volumes:
  db-data:
  redis-data:
  grafana-storage:
  prometheus-data:
  alertmanager-data: 